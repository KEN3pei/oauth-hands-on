/*
 * This file is generated by jOOQ.
 */
package com.example.authorization_server.jooq.tables;


import com.example.authorization_server.jooq.Keys;
import com.example.authorization_server.jooq.OauthDb;
import com.example.authorization_server.jooq.tables.records.ClientsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Clients extends TableImpl<ClientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_db.clients</code>
     */
    public static final Clients CLIENTS = new Clients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsRecord> getRecordType() {
        return ClientsRecord.class;
    }

    /**
     * The column <code>oauth_db.clients.client_id</code>.
     */
    public final TableField<ClientsRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>oauth_db.clients.secret</code>.
     */
    public final TableField<ClientsRecord, String> SECRET = createField(DSL.name("secret"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oauth_db.clients.redirect_uri</code>.
     */
    public final TableField<ClientsRecord, String> REDIRECT_URI = createField(DSL.name("redirect_uri"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oauth_db.clients.scope</code>.
     */
    public final TableField<ClientsRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oauth_db.clients.response_type</code>.
     */
    public final TableField<ClientsRecord, String> RESPONSE_TYPE = createField(DSL.name("response_type"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oauth_db.clients.state</code>.
     */
    public final TableField<ClientsRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Clients(Name alias, Table<ClientsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oauth_db.clients</code> table reference
     */
    public Clients(String alias) {
        this(DSL.name(alias), CLIENTS);
    }

    /**
     * Create an aliased <code>oauth_db.clients</code> table reference
     */
    public Clients(Name alias) {
        this(alias, CLIENTS);
    }

    /**
     * Create a <code>oauth_db.clients</code> table reference
     */
    public Clients() {
        this(DSL.name("clients"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : OauthDb.OAUTH_DB;
    }

    @Override
    public UniqueKey<ClientsRecord> getPrimaryKey() {
        return Keys.KEY_CLIENTS_PRIMARY;
    }

    @Override
    public Clients as(String alias) {
        return new Clients(DSL.name(alias), this);
    }

    @Override
    public Clients as(Name alias) {
        return new Clients(alias, this);
    }

    @Override
    public Clients as(Table<?> alias) {
        return new Clients(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(String name) {
        return new Clients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Name name) {
        return new Clients(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Table<?> name) {
        return new Clients(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Condition condition) {
        return new Clients(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
