/*
 * This file is generated by jOOQ.
 */
package com.example.authorization_server.jooq.tables;


import com.example.authorization_server.jooq.Keys;
import com.example.authorization_server.jooq.OauthDb;
import com.example.authorization_server.jooq.tables.records.RequestsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Requests extends TableImpl<RequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_db.requests</code>
     */
    public static final Requests REQUESTS = new Requests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestsRecord> getRecordType() {
        return RequestsRecord.class;
    }

    /**
     * The column <code>oauth_db.requests.req_id</code>.
     */
    public final TableField<RequestsRecord, String> REQ_ID = createField(DSL.name("req_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oauth_db.requests.query</code>.
     */
    public final TableField<RequestsRecord, JSON> QUERY = createField(DSL.name("query"), SQLDataType.JSON, this, "");

    private Requests(Name alias, Table<RequestsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Requests(Name alias, Table<RequestsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oauth_db.requests</code> table reference
     */
    public Requests(String alias) {
        this(DSL.name(alias), REQUESTS);
    }

    /**
     * Create an aliased <code>oauth_db.requests</code> table reference
     */
    public Requests(Name alias) {
        this(alias, REQUESTS);
    }

    /**
     * Create a <code>oauth_db.requests</code> table reference
     */
    public Requests() {
        this(DSL.name("requests"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : OauthDb.OAUTH_DB;
    }

    @Override
    public UniqueKey<RequestsRecord> getPrimaryKey() {
        return Keys.KEY_REQUESTS_PRIMARY;
    }

    @Override
    public Requests as(String alias) {
        return new Requests(DSL.name(alias), this);
    }

    @Override
    public Requests as(Name alias) {
        return new Requests(alias, this);
    }

    @Override
    public Requests as(Table<?> alias) {
        return new Requests(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(String name) {
        return new Requests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(Name name) {
        return new Requests(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(Table<?> name) {
        return new Requests(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Requests where(Condition condition) {
        return new Requests(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Requests where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Requests where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Requests where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Requests where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Requests where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Requests where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Requests where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Requests whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Requests whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
