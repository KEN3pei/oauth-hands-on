/*
 * This file is generated by jOOQ.
 */
package com.example.authorization_server.jooq.tables;


import com.example.authorization_server.jooq.Keys;
import com.example.authorization_server.jooq.OauthDb;
import com.example.authorization_server.jooq.tables.records.CodesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Codes extends TableImpl<CodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_db.codes</code>
     */
    public static final Codes CODES = new Codes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodesRecord> getRecordType() {
        return CodesRecord.class;
    }

    /**
     * The column <code>oauth_db.codes.code</code>.
     */
    public final TableField<CodesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oauth_db.codes.query</code>.
     */
    public final TableField<CodesRecord, JSON> QUERY = createField(DSL.name("query"), SQLDataType.JSON, this, "");

    private Codes(Name alias, Table<CodesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Codes(Name alias, Table<CodesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oauth_db.codes</code> table reference
     */
    public Codes(String alias) {
        this(DSL.name(alias), CODES);
    }

    /**
     * Create an aliased <code>oauth_db.codes</code> table reference
     */
    public Codes(Name alias) {
        this(alias, CODES);
    }

    /**
     * Create a <code>oauth_db.codes</code> table reference
     */
    public Codes() {
        this(DSL.name("codes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : OauthDb.OAUTH_DB;
    }

    @Override
    public UniqueKey<CodesRecord> getPrimaryKey() {
        return Keys.KEY_CODES_PRIMARY;
    }

    @Override
    public Codes as(String alias) {
        return new Codes(DSL.name(alias), this);
    }

    @Override
    public Codes as(Name alias) {
        return new Codes(alias, this);
    }

    @Override
    public Codes as(Table<?> alias) {
        return new Codes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Codes rename(String name) {
        return new Codes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Codes rename(Name name) {
        return new Codes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Codes rename(Table<?> name) {
        return new Codes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codes where(Condition condition) {
        return new Codes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
